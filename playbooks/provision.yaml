---
- name: Playbook to provision TensorFlow Service API
  tags:
    - openshift
    - thoth

  hosts: localhost
  vars:
    OCP_URL: "{{ lookup('env','OCP_URL') }}"
    OCP_TOKEN: "{{ lookup('env','OCP_TOKEN') }}"
    OCP_NAMESPACE: "{{ lookup('env','OCP_NAMESPACE') }}"
    OCP_SECRET: "{{ lookup('file', '{{ OCP_SECRET }}') }}"
    SESHETA_GITHUB_ACCESS_TOKEN: "{{ lookup('env','SESHETA_GITHUB_ACCESS_TOKEN') }}"
    
  gather_facts: false
  connection: local
  tasks:
    - name: "login to OpenShift using provided token"
      command: "oc login {{ OCP_URL }} --insecure-skip-tls-verify=true --token {{ OCP_TOKEN }}"
      changed_when: false

    - name: "make sure to use project {{ OCP_NAMESPACE }}"
      command: "oc project {{ OCP_NAMESPACE }}"
      register: project_exists
      ignore_errors: true
  
    - name: "check if required tensorflow secret exists"
      command: "oc get secret --namespace {{ OCP_NAMESPACE }} {{OCP_SECRET}}"
      register: secret_exists
      ignore_errors: true

    - name: "create Secret"
      command: oc create secret --namespace "{{ OCP_NAMESPACE }}" generic {{OCP_SECRET}} \
        --from-literal=OCP_URL="{{ OCP_URL }}" \
        --from-literal=OCP_TOKEN="{{ OCP_TOKEN }}" \
        --from-literal=OCP_NAMESPACE="{{ OCP_NAMESPACE }}" \
        --from-literal=OCP_SECRET="{{ OCP_SECRET }}" \
        --from-literal=SESHETA_GITHUB_ACCESS_TOKEN="{{ SESHETA_GITHUB_ACCESS_TOKEN }}" \
        --type=opaque
      when: secret_exists is failed

    - name: create the new application
      command: oc new-app python~https://github.com/thoth-station/tensorflow-release-api.git --name=tensorflow-service --namespace {{ OCP_NAMESPACE }} \
        -p SESHETA_GITHUB_ACCESS_TOKEN="{{ SESHETA_GITHUB_ACCESS_TOKEN }}"
      ignore_errors: true

    - name: set env for the deployment config 
      command: "oc set env --from=secret/{{OCP_SECRET}} dc/tensorflow-service"
      ignore_errors: true

    - name: expose the route
      command: "oc expose svc/tensorflow-service"
      ignore_errors: true
